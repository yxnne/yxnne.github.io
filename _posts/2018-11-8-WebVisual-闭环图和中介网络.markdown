反套现闭环图和中介网络图

# 需求背景

## 背景
* 套现闭环：假设A，B两个人代表买家与卖家，A从B处使用信用卡购买虚拟物品，B得到现金后再返买A的虚拟物品（或转账），这样将现金还给A。存在这样闭环关系的行为可认为是“疑似套现”。

* 中介网络：

## 视觉

# 方案设计

实现技术选择d3.js，因为实现各种效果以及动画更为可控。

## 流程
1. 根据设计稿，无论是中介图还是闭环图，都可以拆分为节点和线，其中节点包括主节点和冗余节点，线包括主边和从边。

可将这两种元素抽象成两个实体类：OneNode， OneEdge。类设计结构大致如下：

```
class OneNode {
	// 构造器，基于基础数据构造对象
	// 比如位置坐标，实体类型等各种属性
	constructor(info)

	// 绘制自己的方法, 包括动画
	// 包括展示自己
	draw()

	// 销毁自己的方法
	destroy()
}

// class OneEdge 一样

```

2. 假设上述节点已经实现，即我们可以通过这样的代码添加一个点:
```
const node = new OneNode({props, x, y});

node.draw();

```
这是绘制的基础方法，那么在什么时候绘制？至少要先得到每一个点的x, y坐标，所以要先布局。

当然，在布局之前要数据处理...所以大致的流程为：

处理数据--> 布局 ---> 绘制 ---> 销毁

3. 闭环图的主点布局设计

因为闭环图的节点数据量有限(2--5)，所以可以视觉设计的指导，分情况讨论就能覆盖得到所有布局。
大致方法设计为：主点将绘制区域划分为九宫格(section1 -- 9)，不同主点数对应不同的布局策略，在对应的策略集中挑选策略，从而在九宫格区域中生成随机点，比如三点布局的策略有[section1, section3, section7],这是由视觉同学钦点的认为美的。

4. 中介图布局设计

中介图点数未知，不能分情况覆盖，所以其布局需要使用关系图布局方式，d3力导向布局可以满足要求。
PS:力导向图通常是动态的，就是布局和绘制更新位置是同时进行。但是本例中需要先算出位置，再绘制。这时候，参展静态力导向图绘制方法。

5. 动画方案

1) 每一个node和edge在自己的draw()方法中负责自己的绘制动画以及销毁动画。

2) 整幅图的动画控制(方案的制定依据UI视觉设计)：
* 闭环图是按次序延迟调用绘制
* 中介图可以在绘制之前根据类型安排次序，整幅绘制时按照次序依次批量绘出，就像执行脚本一样。

## 模块

# 实现细节

## 绘制

当新数据数据到来， 需要展示时，一个基本的周期为：布局绘制， 展示， 销毁，再拿到下次数据。
当数据已经处理好之后，其余过程的流程如图所示：


>>>>>>>图



## 性能

性能上，因为一直在绘制，最要紧的问题就是防止内存泄漏，在性能方面至少要做到：
1. 计时器一定要及时清除；
2. 资源销毁一定要销毁干净，不要有遗漏；

# 有待提高

## 细节
1. 同一区域中如何随机高效的生成两个不重合的点？三个呢？

2. 沿着曲线路径生长， 沿着曲线路径销毁；

## 经验

下次在设计时，一定想到，后台数据并不一定是理想合理数据。后期很多问题可能都是这种程序不够健硕而导致的。
当遇到非理想数据时，预留好处理方法，或者处理之，规避之，抛弃之，或者抛出异常等。

# 参考资料

[d3静态力导向]()

[d3动画API]()